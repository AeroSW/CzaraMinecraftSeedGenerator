import os
import sys
import argparse
import hashlib
import json
import random
import time

json_file = './czara_seed_gen.history.json'
hash_key = 'hash'
hash_decimal_key = 'hash-decimal'
seeds_key = 'seeds'
hash_list = ['sha3_256', 'sha3_224', 'blake2s', 'sha384', 'sha256', 'sha224', 'sha3_512', 'blake2b', 'sha512', 'sha3_384', 'shake_128', 'shake_256', 'md5', 'sha1']

def main():
    parser = argparse.ArgumentParser(
        prog='Czara Minecraft Seed Generator',
        description='Generates a 64-bit signed integer to use as a Minecraft seed.\nAble to provide a number or phrase or random characters as seeds for generation.',
        epilog = "Command line arguments are optional.  It'll use current datetime as default.\nAuthor: Kenneth Cornett (Czara Software)",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument("-i","--init", type=str, required=False,default=None,
                        help="Initializer for random seed generation.")
    parser.add_argument("-a","--algorithm",type=str,choices=hash_list,default='md5',required=False,
                        help="Hash Algorithm to generate seed used in random generator." \
                             "\nAlgorithms can be any Python supported algorithm " \
                             "\nfrom `hashlib.algorithms_guaranteed`.", metavar="[md5, sha1, sha3_512, .....]")
    try:
        args = parser.parse_args()
        seed = str(time.time_ns())
        if args.init is not None:
            seed = str(args.init)
        hash = str(args.algorithm)
        val = phrase_gen(seed, hash)
        print(f"\t>> Generated random seed (64-bit signed int) is {val}")
    except argparse.ArgumentError:
        print(f"Invalid command line argument provided: {parser.error}")
    except argparse.ArgumentTypeError:
        print(f"Invalid command line argument type provided: {parser.error}")
    #except (Exception,) as err:
    #    print(f"Error: {err}")

def phrase_gen(input_string, algorithm='md5'):
    cc = get_seed_count(input_string, algorithm)
    hash = generate_hash(input_string, algorithm)
    decimal = int(hash,16)
    random.seed(decimal, version=2)
    [random.getrandbits(64) for _ in range(0,cc)]
    n_num = random.getrandbits(64) - 2**63
    write_json_log(input_string, algorithm, hash, decimal, n_num)
    return n_num

def get_seed_count(input, algorithm):
    result = 0
    json_obj = {}
    if (os.path.exists(json_file)):
        with open(json_file, 'r+') as jf:
            json_obj = json.load(jf)
        if (input not in json_obj
            or algorithm not in json_obj[input]
            or seeds_key not in json_obj[input][algorithm]
            or type(json_obj[input][algorithm][seeds_key]) is not list):
            return 0
        result = len(json_obj[input][algorithm][seeds_key])
    return result

def write_json_log(input, algorithm, hash, decimal, rand_seed):
    json_obj = {}
    if (os.path.exists(json_file)):
        with open(json_file, 'r+') as jf:
            json_obj = json.load(jf)
    if (input not in json_obj):
        json_obj[input] = {}
    if (algorithm not in json_obj[input]):
        json_obj[input][algorithm] = {}
    if (hash_key not in json_obj[input][algorithm]):
        json_obj[input][algorithm][hash_key] = hash
        json_obj[input][algorithm][hash_decimal_key] = decimal
    if (seeds_key not in json_obj[input][algorithm]
        or type(json_obj[input][algorithm][seeds_key]) is not list):
        json_obj[input][algorithm][seeds_key] = []
    json_obj[input][algorithm][seeds_key].append(rand_seed)
    with open(json_file, 'w+') as jf:
        jf.write(json.dumps(json_obj, indent=4))

# generate_hash was generated by Google Search AI Overview
# I liked how it was laid out, so I decided to keep it as is.
def generate_hash(input_string, algorithm='sha256'):
    """
    generate_hash was generated by Google Search AI Overview

    Generates a hash of a string using the specified algorithm.

    Args:
        input_string: The string to hash.
        algorithm: The hashing algorithm to use (e.g., 'md5', 'sha256', 'sha512'). 
        Defaults to 'sha256'.

    Returns:
        The hexadecimal representation of the hash.
    """
    hasher = hashlib.new(algorithm)
    hasher.update(input_string.encode('utf-8'))
    return hasher.hexdigest()

if __name__ == "__main__":
    main()